{"ast":null,"code":"import axios from'axios';import{tokenConfig}from'./authActions';import{returnErrors}from'./errorActions';export var getPosts=function getPosts(){return function(dispatch,getState){dispatch(setPostsLoading());axios.get('/posts',tokenConfig(getState)).then(function(res){return dispatch({type:'GET_POSTS',payload:res.data});}).catch(function(err){return dispatch(returnErrors(err.response.data,err.response.status));});};};export var getPostsByUserId=function getPostsByUserId(userId){return function(dispatch,getState){dispatch(setPostsLoading());axios.get('/posts',{params:{userId:userId}},tokenConfig(getState)).then(function(res){return dispatch({type:'GET_POSTS',payload:res.data});}).catch(function(err){return dispatch(returnErrors(err.response.data,err.response.status));});};};export var addPost=function addPost(post){return function(dispatch,getState){axios.post('/posts',post,tokenConfig(getState)).then(function(res){return dispatch({type:'ADD_POST',payload:res.data});}).catch(function(err){return dispatch(returnErrors(err.response.data,err.response.status));});};};export var setPostsLoading=function setPostsLoading(){return{type:'POSTS_LOADING'};};","map":{"version":3,"sources":["/home/achraf/Documents/Coding/kindleshare/client/src/actions/postActions.js"],"names":["axios","tokenConfig","returnErrors","getPosts","dispatch","getState","setPostsLoading","get","then","res","type","payload","data","catch","err","response","status","getPostsByUserId","userId","params","addPost","post"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,WAAT,KAA4B,eAA5B,CACA,OAASC,YAAT,KAA6B,gBAA7B,CAEA,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,SAAM,UAACC,QAAD,CAAWC,QAAX,CAAwB,CAClDD,QAAQ,CAACE,eAAe,EAAhB,CAAR,CACAN,KAAK,CAACO,GAAN,CAAU,QAAV,CAAoBN,WAAW,CAACI,QAAD,CAA/B,EACKG,IADL,CACU,SAAAC,GAAG,QAAIL,CAAAA,QAAQ,CAAC,CAClBM,IAAI,CAAE,WADY,CAElBC,OAAO,CAAEF,GAAG,CAACG,IAFK,CAAD,CAAZ,EADb,EAKKC,KALL,CAKW,SAAAC,GAAG,QAAIV,CAAAA,QAAQ,CAACF,YAAY,CAACY,GAAG,CAACC,QAAJ,CAAaH,IAAd,CAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAZ,EALd,EAMH,CARuB,EAAjB,CAUP,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAAAC,MAAM,QAAI,UAACd,QAAD,CAAWC,QAAX,CAAwB,CAC9DD,QAAQ,CAACE,eAAe,EAAhB,CAAR,CACAN,KAAK,CAACO,GAAN,CAAU,QAAV,CAAoB,CAAEY,MAAM,CAAE,CAAED,MAAM,CAAEA,MAAV,CAAV,CAApB,CAAoDjB,WAAW,CAACI,QAAD,CAA/D,EACKG,IADL,CACU,SAAAC,GAAG,QAAIL,CAAAA,QAAQ,CAAC,CAClBM,IAAI,CAAE,WADY,CAElBC,OAAO,CAAEF,GAAG,CAACG,IAFK,CAAD,CAAZ,EADb,EAKKC,KALL,CAKW,SAAAC,GAAG,QAAIV,CAAAA,QAAQ,CAACF,YAAY,CAACY,GAAG,CAACC,QAAJ,CAAaH,IAAd,CAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAZ,EALd,EAMH,CARqC,EAA/B,CAUP,MAAO,IAAMI,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAAAC,IAAI,QAAI,UAACjB,QAAD,CAAWC,QAAX,CAAwB,CACnDL,KAAK,CAACqB,IAAN,CAAW,QAAX,CAAqBA,IAArB,CAA2BpB,WAAW,CAACI,QAAD,CAAtC,EACKG,IADL,CACU,SAAAC,GAAG,QAAIL,CAAAA,QAAQ,CAAC,CAClBM,IAAI,CAAE,UADY,CAElBC,OAAO,CAAEF,GAAG,CAACG,IAFK,CAAD,CAAZ,EADb,EAKKC,KALL,CAKW,SAAAC,GAAG,QAAIV,CAAAA,QAAQ,CAACF,YAAY,CAACY,GAAG,CAACC,QAAJ,CAAaH,IAAd,CAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAZ,EALd,EAMH,CAP0B,EAApB,CASP,MAAO,IAAMV,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CACjC,MAAO,CACHI,IAAI,CAAE,eADH,CAAP,CAGH,CAJM","sourcesContent":["import axios from 'axios';\nimport { tokenConfig } from './authActions';\nimport { returnErrors } from './errorActions';\n\nexport const getPosts = () => (dispatch, getState) => {\n    dispatch(setPostsLoading());\n    axios.get('/posts', tokenConfig(getState))\n        .then(res => dispatch({\n            type: 'GET_POSTS',\n            payload: res.data\n        }))\n        .catch(err => dispatch(returnErrors(err.response.data, err.response.status)))\n}\n\nexport const getPostsByUserId = userId => (dispatch, getState) => {\n    dispatch(setPostsLoading());\n    axios.get('/posts', { params: { userId: userId } }, tokenConfig(getState))\n        .then(res => dispatch({\n            type: 'GET_POSTS',\n            payload: res.data\n        }))\n        .catch(err => dispatch(returnErrors(err.response.data, err.response.status)))\n}\n\nexport const addPost = post => (dispatch, getState) => {\n    axios.post('/posts', post, tokenConfig(getState))\n        .then(res => dispatch({\n            type: 'ADD_POST',\n            payload: res.data\n        }))\n        .catch(err => dispatch(returnErrors(err.response.data, err.response.status)))\n};\n\nexport const setPostsLoading = () => {\n    return {\n        type: 'POSTS_LOADING'\n    }\n}"]},"metadata":{},"sourceType":"module"}