{"ast":null,"code":"import axios from'axios';import{returnErrors}from'./errorActions';// check token and load user\nexport var loadUser=function loadUser(){return function(dispatch,getState){dispatch({type:'USER_LOADING'});axios.get('/auth/user',tokenConfig(getState)).then(function(res){return dispatch({type:'USER_LOADED',payload:res.data});}).catch(function(err){dispatch(returnErrors(err.response.data,err.response.status));dispatch({type:'AUTH_ERROR'});});};};// register user\nexport var signup=function signup(_ref){var name=_ref.name,email=_ref.email,password=_ref.password;return function(dispatch){var config={headers:{'Content-type':'application/json'}};var body=JSON.stringify({name:name,email:email,password:password});axios.post('/users',body,config).then(function(res){return dispatch({type:'SIGNUP_SUCCESS',payload:res.data});}).catch(function(err){dispatch(returnErrors(err.response.data,err.response.status,'SIGNUP_FAIL'));dispatch({type:'SIGNUP_FAIL'});});};};export var signin=function signin(_ref2){var email=_ref2.email,password=_ref2.password;return function(dispatch){var config={headers:{'Content-type':'application/json'}};var body=JSON.stringify({email:email,password:password});axios.post('/auth',body,config).then(function(res){return dispatch({type:'SIGNIN_SUCCESS',payload:res.data});}).catch(function(err){dispatch(returnErrors(err.response.data,err.response.status,'SIGNIN_FAIL'));dispatch({type:'SIGNIN_FAIL'});});};};export var signout=function signout(){return{type:'SIGNOUT_SUCCESS'};};// setup config/headers and token\nexport var tokenConfig=function tokenConfig(getState){// get token from local storage\nvar token=getState().auth.token;// headers\nvar config={headers:{\"Content-type\":\"application/json\"}};if(token){config.headers['x-auth-token']=token;}return config;};","map":{"version":3,"sources":["/home/achraf/Documents/Coding/kindleshare/client/src/actions/authActions.js"],"names":["axios","returnErrors","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","signup","name","email","password","config","headers","body","JSON","stringify","post","signin","signout","token","auth"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { returnErrors } from './errorActions';\n\n// check token and load user\nexport const loadUser = () => (dispatch, getState) => {\n    dispatch({ type: 'USER_LOADING' });\n\n    axios.get('/auth/user', tokenConfig(getState))\n        .then(res => dispatch({\n            type: 'USER_LOADED',\n            payload: res.data\n        }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status));\n            dispatch({ type: 'AUTH_ERROR' })\n        })\n}\n\n// register user\nexport const signup = ({ name, email, password }) => dispatch => {\n    const config = {\n        headers: {\n            'Content-type': 'application/json'\n        }\n    }\n    const body = JSON.stringify({ name, email, password });\n\n    axios.post('/users', body, config)\n        .then(res => dispatch({ \n            type: 'SIGNUP_SUCCESS',\n            payload: res.data\n        }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status, 'SIGNUP_FAIL'))\n            dispatch({ type: 'SIGNUP_FAIL' });\n        })\n}\n\nexport const signin = ({ email, password }) => dispatch => {\n    const config = {\n        headers: {\n            'Content-type': 'application/json'\n        }\n    }\n    const body = JSON.stringify({ email, password });\n\n    axios.post('/auth', body, config)\n        .then(res => dispatch({ \n            type: 'SIGNIN_SUCCESS',\n            payload: res.data\n        }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status, 'SIGNIN_FAIL'))\n            dispatch({ type: 'SIGNIN_FAIL' });\n        })\n}\n\n\nexport const signout =  () => {\n    return { type: 'SIGNOUT_SUCCESS' }\n}\n\n\n// setup config/headers and token\nexport const tokenConfig = getState => {\n    // get token from local storage\n    const token = getState().auth.token;\n\n    // headers\n    const config = {\n        headers: {\n            \"Content-type\": \"application/json\",\n        }\n    }\n\n    if(token) {\n        config.headers['x-auth-token'] = token;\n    }\n\n    return config;\n}"]},"metadata":{},"sourceType":"module"}