{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './errorActions'; // check token and load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  dispatch({\n    type: 'USER_LOADING'\n  });\n  axios.get('/auth/user', tokenConfig(getState)).then(res => dispatch({\n    type: 'USER_LOADED',\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: 'AUTH_ERROR'\n    });\n  });\n}; // register user\n\nexport const signup = ({\n  name,\n  email,\n  password\n}) => dispatch => {\n  const config = {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n  axios.post('/users', body, config).then(res => dispatch({\n    type: 'SIGNUP_SUCCESS',\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'SIGNUP_FAIL'));\n    dispatch({\n      type: 'SIGNUP_FAIL'\n    });\n  });\n};\nexport const signin = ({\n  email,\n  password\n}) => dispatch => {\n  const config = {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  axios.post('/auth', body, config).then(res => dispatch({\n    type: 'SIGNIN_SUCCESS',\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'SIGNIN_FAIL'));\n    dispatch({\n      type: 'SIGNIN_FAIL'\n    });\n  });\n};\nexport const signout = () => {\n  return {\n    type: 'SIGNOUT_SUCCESS'\n  };\n}; // setup config/headers and token\n\nexport const tokenConfig = getState => {\n  // get token from local storage\n  const token = getState().auth.token; // headers\n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  };\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/home/achraf/Documents/Coding/kindleshare/client/src/actions/authActions.js"],"names":["axios","returnErrors","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","signup","name","email","password","config","headers","body","JSON","stringify","post","signin","signout","token","auth"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { returnErrors } from './errorActions';\n\n// check token and load user\nexport const loadUser = () => (dispatch, getState) => {\n    dispatch({ type: 'USER_LOADING' });\n\n    axios.get('/auth/user', tokenConfig(getState))\n        .then(res => dispatch({\n            type: 'USER_LOADED',\n            payload: res.data\n        }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status));\n            dispatch({ type: 'AUTH_ERROR' })\n        })\n}\n\n// register user\nexport const signup = ({ name, email, password }) => dispatch => {\n    const config = {\n        headers: {\n            'Content-type': 'application/json'\n        }\n    }\n    const body = JSON.stringify({ name, email, password });\n\n    axios.post('/users', body, config)\n        .then(res => dispatch({ \n            type: 'SIGNUP_SUCCESS',\n            payload: res.data\n        }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status, 'SIGNUP_FAIL'))\n            dispatch({ type: 'SIGNUP_FAIL' });\n        })\n}\n\nexport const signin = ({ email, password }) => dispatch => {\n    const config = {\n        headers: {\n            'Content-type': 'application/json'\n        }\n    }\n    const body = JSON.stringify({ email, password });\n\n    axios.post('/auth', body, config)\n        .then(res => dispatch({ \n            type: 'SIGNIN_SUCCESS',\n            payload: res.data\n        }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status, 'SIGNIN_FAIL'))\n            dispatch({ type: 'SIGNIN_FAIL' });\n        })\n}\n\n\nexport const signout =  () => {\n    return { type: 'SIGNOUT_SUCCESS' }\n}\n\n\n// setup config/headers and token\nexport const tokenConfig = getState => {\n    // get token from local storage\n    const token = getState().auth.token;\n\n    // headers\n    const config = {\n        headers: {\n            \"Content-type\": \"application/json\",\n        }\n    }\n\n    if(token) {\n        config.headers['x-auth-token'] = token;\n    }\n\n    return config;\n}"]},"metadata":{},"sourceType":"module"}